1. this
 1-1. this의 용법
  - 여러개의 요소를 의미하는 css셀레터를 사용하여
  이벤트를 정의 한 경우, 대상 요소들은 모두 동일한
  이벤트를 발생시킬 수 있다.
  - 이때 $(this)는 현재 이벤트가 발생한 단 하나의
  요소를 가리킨다.

 1-2. this를 부정하는 not(this)
  - $("요소")객체의 not(this)함수는 여러 HTML요소들
  중 이벤트가 발생한 자신을 제외한 나머지 객체들을
  가리킨다.
  
 1-3. not()함수의 기능은 "~중에서 대상은 제외"라는 의미
   - ".btn" 클래스를 갖는 요소 중에서 "#mybtn"만 제외

	let mybtn = $("#mybtn");
	$(".btn").not(mybtn).css(....);

	$(".btn").not($("#mybtn")).css(....);

2. 애니메이션

3. each
 - each() 메소드는 객체나 배열에서 모두 사용할 수 있는
 범용적인 반복 함수이다.
 - length속성이 있는 배열이나 배열과 같은 객체를 
 전달받아, 그 길이만큼 반복해서 콜백함수를 실행한다.
 - 객체의 경우는 객체가 가지고 있는 프로퍼티의 개수만큼
 반복해서 콜백함수를 실행한다.

4. 엘리먼트 제어
 4-1. 자식으로 삽입
  append(), appendTo(), html(), prepend(), prependTo(),
  text()

 4-2. 형제로 삽입
  after(), before(), insertAfter(), insertBefore()
 
 4-3. 부모로 감싸기
  unwrap(), wrap(), wralAll(), wrapInner()

 4-4. 삭제
  detach(), empty(), remove(), unwrap()

 4-5. 치환
  replaceAll(), replaceWith()

 4-6. 클래스
  addClass, hasClass, removeClass, toggleClass()
 
 4-7. 속성제어
  attr(), prop(), removeAttr(), removeProp(), val()

5. 탐색(traversing)
 

java, javaproject, dbms
html, css, javascript, jQuery, csproject

* 웹 서버 프로그램이란

* 90년대 CS의 주류에서 이젠 2000년 이후에는 급격하게
web으로 전환이 되었으나, 두가지의 경우 서로 장단점이 있다

* Client Server 모델
 - 간단한 구조로 되어 있다.대부분 Server에서 데이터를 처리
 하고 클라이언트는 UI를 담당한다.
 - 구조가 간단하여 속도가 좋은 특징이 있으나, 확장성은 
 조금 떨어진다.

 - 장점 
	-> 속도가 빠르다

 - 단점
	-> 구조상 확장의 어려움이 있다.
	-> Client 프로그램을 다운로드 받아 PC에 설치해야
	하는 배포의 번거로움
	-> 버그를 수정하여도 배포가히가 어려움
	-> 특정 OS 및 하드웨어에 종속적인

 - Socket통신
	-> 소켓통신이란 서버와 클라이언트 양방향 
	연결이 이루어지는 통신으로, 클라이언트도 서버로
	요청을 보낼 수 있고 서버도 클라이언트로 요청을
	보낼수 있는 통신
	-> 클라이언트와 서버 양쪽에서 서로에게 데이터를
	전달하는 방식의 양방향 통신

