1. QClass 인스턴스를 사용하는 2가지 방법

	QMember qMember = new QMember("m");	// 별칭 직접 지정
	QMember qMember = QMember.member;		// 기본 인스턴스 사용

2. JPQL이 제공하는 모든 검색 조건 제공
	- member.username.eq("member1")
		-> username = 'member1'
 	- member.username.ne("member1")
		-> username != 'member1'
	- member.username.eq("member1").not()
		-> username != 'member1'

	- member.username.isNotNull()
		-> 이름이 is not null

	- member.age.in(10, 20)
		-> age in (10, 20)
	- member.age.notin(10, 20)
		-> age not in(10, 20)
	- member.age.between(10, 30)
		-> between 10, 30

	- member.age.goe(30)
		-> age >= 30
	- member.age.gt(30)
		-> age > 30
	- member.age.loe(30)
		-> age <= 30
	- member.age.lt(30)
		-> age < 30

	- member.username.like("member%")
		-> like 검색
	- member.username.contains("member")
		-> like '%member%' 검색
	- member.username.startsWith("member")
		-> like 'member%' 검색

3. 결과조회
	- fetch() : 리스트 조회, 뎅디터 없으면 빈 리스트 반환
	- fetchOne() : 단 건 조회
		-> 결과가 없으면 : null
		-> 결과가 둘 이상이면 : com.querydsl.core.NotUniqueResultException
	- fetchFirst() : limit(1).fetchOne()

4. 정렬
	- desc(), asc() : 일반 정렬
	- nullsLast(), nullsFirst() : null 데이터 순서 부여

5. join
 - 조인의 기본 문법은 첫 번째 퓨ㅏ라미터에 조인 대상을 지정하고, 
  두번째 파라미터에 별칭(alias)으로 사용할 Q타입을 지정하면 된다.

	5-1. 종류
		- join(), innerJoin() : 내부 조인(inner joint)
		- leftJoin() : left 외부 조인(left outer join)
		- rightJoin() : right 외부 조인(right outer join)

6. 서브 쿼리
	6-1. from 절의 서브쿼리의 한계
		- JPA JPQL 서브쿼리의 한계점으로 from절의 서브쿼리는 지원하지 않는다.
		QueryDSL도 당연히 지원하지 않는다.

	6-2. from절의 서브쿼리 해결방안
		1. 서브쿼리를 join으로 변경한다.(가능한 상황도 있고, 불가능한 상황도 있다.)
		2. 애플리케이션에서 쿼리를 2번 분리해서 실행한다.
		3. nativeSQL을 사용한다.

7. case문

8. 프로젝션과 결과 반환
 	- 프로젝션 : select 대상 지정
	
	List<String> result = queryFactory
													.select(member.username)
													.from(member)
													.fetch();

	- 프로젝션 대상이 하나면 타입을 명확하기 저장할 수 있다.
	- 프로젝션 대상이 둘 이상이면 튜플이나 DTO로 조회

9. QueryDSL빈 생성
	- 결과를 DTO 반환할 때 사용
		-> 프로퍼티 접근
		-> 필드 직접 접근
		-> 생성자 사용












