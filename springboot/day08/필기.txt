1. 스프링 인터셉터
 1-1. 인터셉터란
  - 스프링 인터셉터도 서블릿 필터와 같이 웹과 관련된 공통
  관심 사항을 효과적으로 해결할 수 있는 기술이다. 
  서블릿 필터가 서블릿이 제공하는 기술이라면, 
  스프링 인터셉터는 스프링 MVC가 제공하는 기술이다.
  - 둘다 웹과 관련된 공통 관심 사항을 처리하지만, 
  적용되는 순서와 범위, 그리고 사용방법이 다르다.
  - 필터보다 언터셉터가 더 디테일한 컨트롤이 가능하다.

 1-2. 스프링 인터셉터 흐름
  - HTTP요청 -> WAS -> 필터 -> 서블릿 -> 스프링 인터셉터 -> 컨트롤러
  - 스프링 인터셉터는 디스패처 서블릿과 컨트롤러 사이에서 
  컨트롤러 호출 직전에 호출 된다.
  - 스프링 인터셉터는 스프링 MVC가 제공하는 기능이기 때문에 결국
  디스패처 서블릿 이후에 등장하게 된다. 스프링 MVC의 시작점이 
  디스패처서블릿이라고 생각해보면 이해가 될것이다.
  - 스프링 인터셉터에도 URL패턴을 적용할 수 있는데, 서블릿 URL패턴과는
  다르고, 매우 정밀하게 설정할 수 있다.

 1-3. 스프링 인터셉터 체인
  - HTTP요청 -> WAS -> 필터 -> 서블릿 -> 인터셉터1 -> 인터셉터2 ->
     -> 컨트롤러
 - 스프링 인터셉터는 체인으로 구성되는데, 중간에 인터셉터를 자유롭게
 추가할 수 있다. 예를 들어서 로그를 남기는 인터셉터를 먼저 적용하고,
 그 다음에 로그인 여부를 체크하는 인터셉터를 만들 수 있다. 지금 까지
 내용을 보면 서블릿 필터와 호출되는 순서만 다르고, 제공하는 기능은
 비슷해 보인다.
 - 스프링 인터셉터는 서블릿 필터보다 편리하고, 더 정교하고 다양한
 기능을 지원한다. 

 1-4. 스프링 인터셉터 인터페이스
  - 스프링의 인터셉터를 사용하려면 HandlerInterceptor인터페이스를
  구현하면 된다. 
  - 서블릿 필터의 경우 단순하게 doFilter()하나만 제공된다. 
  인터셉터는 컨트롤러 호출 전(preHandle), 호출 후(postHandle), 
  요청 완료 이후(afterCompletion)와 같이 단계적으로 잘 세분화 되어 있다
 
 1-5. 정상흐름
  - preHandle : 
		-> 컨트롤러 호출 전에 호출된다. 
    	-> preHandle의 응답값이 true이면 다음으로 진행하고, false이면
 		더는 진행하지 않는다. 
		-> false인 경우 나머지 인터셉터는 물론이고, 핸들러 어댑터도
		호출하지 않는다 .

  - postHandle : 
		-> 컨트롤러 호출 후에 호출된다. 

  - afterHandle : 
		-> 뷰가 렌더링 된 이후에 호출된다. 

 1-6. interceptor 경로
  - /sub1/test1 : /** 
											모든, 어느 경로에 대해서 적용할때
  - /sub1/test1, /sub1/test2 : /* 
  																		1개의 어떠한 경로에 상관없이 사용


2. JPA
 2-1. JPA란
  - Java Persistence API
 - java 진영에서 ORM(Object-Relational Mapping) 기술 표준으로
  사용하는 인터페이스 모음
  - 자바 어플리케이션에서 관계형 데이터베이스를 사용하는 방식을 정의한
  인터페이스

 2-2. ORM(Object-Relational Mapping)
  - 우리가 일반적으로 알고있는 애플레케이션 Class와 
  RDB(Relational DataBase)의 테이블을 매핑(연결)한다는 뜻이며,
  기술적으로는 어플리케이션의 객체를 RDB테이블에 자동으로 영속화
  해주는 것이라고 보면된다.
 - 객체와 관계형 데이터베이스의 데이터를 자동으로 매핑(연결)해주는
  것을 말한다.
  - 객체지향 프로그래밍은 클래스를 사용하고, 관계형 데이터베이스는 
  테이블을 사용한다.
  - 객체 모델과 관계형 모델 간에 불일치가 존재한다. 
  - ORM을 통해 객체 간의 관계를 바탕으로 SQL을 자동으로 생성하여
  불일치를 해결한다. 
  - 데이터베이스 데이터 <---- mapping ----> object 필드
  - 객체를 통해 간접적으로 데이터베이스 데이터를 다룬다.

 2-3. 장점
  - SQL문이 아닌 method를 통해 DB를 조작할 수 있어, 개발자는 
  객체 모델을 이용하여 비지니스 로직을 구성하는데만 집중할 수 있음.
  (내부적으로는 쿼리를 생성하여 DB를 조작함. 하지만 개발자는 이를
  신경쓰지 않아도 됨)
  - Query와 같이 필요한 선언문, 할당 등의 부수적인 코드가 줄어들어,
  각종 객체에 대한 코드를 별도로 작성하여 코드의 가독성을 높임
  - 객체지향적인 코드 작성이 가능하다. 생산성이 증가
  - 매핑하는 정보가 Class로 명시 되었기 때문에 ERD를 보는 의존도를
  낮출 수 있고 유지보수 및 리팩토링에 유리
  - 예를들어 기존 방식에서 MySQL 데이터베이스를 사용하다가  
  PostgreSQL 로 변환한다고 가정해보면, 새로 쿼리를 짜야하는 경우가 생김.
  이런 경우에 ORM을 사용하면 쿼리를 수정할 필요가 없음

 2-4. 단점
  - 프로젝트의 규모가 크고 복잡하여 설계가 잘못된 경우, 
  속도 저하 및 일관성을 무너뜨리는 문제점이 생길 수 있음
  - 복잡하고 무거운 Query는 속도를 위해 별도의 튜닝이 필요하기 때문에
  결국엔 SQL문을 써야할 수도 있다.
  - 학습비용이 비쌈

3. 데이터베이스 방언
 - JPA는 특정 데이터베이스에 종속 X
 - 각각의 데이터베이스가 제공하는 SQL문법과 함수는 조금씩 다름
 - 가변문자 : Oracle varchar2, MySQL varchar
  문자열을 자르는 함수 : Oracle substr(), SQL표준 substring()
 => oracle이라는 사투리를 써서 쿼리를 작성해 라는 뜻
 
4. JPA사용
 - @Entity : JPA가 관리할 객체
 - @Id : 데이터베이스 PK와 매핑


~3시까지





















