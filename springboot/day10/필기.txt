1. 연관관계 매핑
 - 현재 방식은 객체 설계를 테이블 설계에 맞춘 방식
 - 참조가 없으므로 ERD도 잘못 그려짐

 1-1. 연관관계 매핑 기초
	- 객체와 테이블 연관관계의 차이를 이해
	- 객체의 참조와 테이블의 외래 키를 매핑	
	- 용어
		-> 방향(Direction)
		: 단방향, 양방향
		-> 다중성(Multiplicity)
		: 다대일(N:1), 일대다(1:N), 일대일(1:1), 다대다(N:M)
		-> 연과관계 주인(Owner)
		: 객체 양방향 연관관계는 관리 주인이 필요

 1-2. 객체와 테이블 차이점
  - 객체를 테이블에 맞추어 데이터 중심으로 모델링하면, 
  협력관계를 만들 수 없다.
  - 테이블은 외래 키로 조인을 사용해서 연관된 테이블을 찾는다.
  - 객체는 참조를 사용해서 연관된 객체를 찾는다.
  - 테이블과 객체 사이에는 이런 큰 간격이 있다.

 1-3. 단방향 연관관계

 1-4. 양방향 연관관계와 연관관계의 주인

2. 객체와 테이블이 관계를 맺는 차이
 2-1. 테이블 연관관계 = 1개
   - 회원 <-> 팀의 연과관계는 1개, 양방향 접근 가능
   - Member 테이블 입장에서 Team 테이블 조인 가능
   - Team 테이블 입장에서 Member 테이블 조인 가능

 2-2. 객체 연관관계 = 2개
  - 회원 -> 팀 연관관계 1개(단방향)
  - 팀 -> 회원 연관관계 1개(단방향)
  - 사실은 단방향 연관관계가 2개 있는것이다.
  - 억지로 양방향이라고 말하는 것

 2-3. 딜레마 온다
 - 둘 중 하나로 외래키를 관리해야 한다.
  - Member 에서 Team으로 가는 team 참조 값과, 
   Team에서 member로 가는 members 참조 값이 있다.
    Member에서 Team값이 수정 됐을 때 MEMBER Table의 TEAM_ID가
    수정이 되야 하는지?
    Team에있는 members를 수정 했을 때 MEMBER에 있는 TEAM_ID가
    수정 되야 하는지?
    둘 중에 무엇을 봐야하는지?
  - DB입장에서는 MEMBER에있는 TEAM_ID만 update가 되면 된다.
		=> 룰(주인)이 생긴다.

 2-4. 연관관계의 주인(Owner)
  - 양방향 매핑 규칙
  - 객체의 두 관계중 하나를 연관관계의 주인으로 지정
  - 연관관계의 주인만이 외래 키를 관리(등록, 수정)
  - 주인이 아닌쪽은 읽기만 가능
  - 주인은 mappedBy 속성 사용X
		-> mappedBy : 내가 누군가에 의해서 mapping이 되었다 라는 뜻

 2-5. 누구를 주인으로? -> 답이있다.
  - 외래 키가 있는 곳을 주인으로 정해야한다.
  - Member.team 이 연관관계의 주인

3. 양방향 연관관계 주의
 - 순수 객체 상태를 고려해서 항상 양쪽에 값을 설정
 - 연관관계 편의 메소드를 생성
 - 양방향 매핑시에 무한 루프를 조심하다
	(예: toString(), lombok, ....)

4. 양방향 매핑 정리
 - 단방향 매핑만으로도 이미 연관관계 매핑은 완료
 - 양방향 매핑은 반대 방향으로 조회기능이 추가된 것 뿐
 - 양방향 사용 이유: JPQL에서 역방향으로 탐색할 일이 많음
 - 단방향 매핑을 하고 양방향 매핑은 필요할 때 추가해도 됨
 (테이블에 영향을 주지 않음)
 - 결론 : 객체입장에서 양방향 매핑은 이득이 별로 되지 않는다
           필수가 아님.
					따라서 필요 시에 그때 생성해도 늦지않다.(옵션)

5. 연관관계 주인을 정하는 기준
 - 비지니스 로직을 기준으로 연관관계의 주인을 선택하면 안됨
 - 연관관계의 주인은 외래키의 위치를 기준으로 정해야함.


























