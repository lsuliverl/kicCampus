1. 로그인 처리하기 - 쿠키 사용
 1-1. 쿠키의 종류
  - 영속 쿠키 : 만료 날짜를 입력하면 해당 날짜까지 유지
  - 세션 쿠키 : 만료 날짜를 생략하면 브라우저 종료시 까지만 유지

2. session
 2-1. session 옵션
  - request.getSession(true);
	: 세션이 있으면 기존 세션을 반환한다.
 	  세션이 없으면 새로운 세션을 생성해서 반환한다.

  - request.getSession(false);
	: 세션이 있으면 기본 세션을 반환한다.
     세션이 없으면 새로운 세션을 생성하지 않는다. null로 반환한다.

  - request.getSession();
	: 신규 세션을 생성하는 request.getSession(true);와 동일하다.

3.  필터
 - HTTP Request -> WAS -> 필터 -> 서블릿 -> 컨트롤러 -> ....

4. 로직정리
 private static final String[] whitelist =
		{"/", "/members/add", "/login", "/logout", "/css/*"};
 -> 인증 필터를 적용해도 홈, 회원가입, 로그인 화면, css같은 리소스에는
 접근할 수 있어야한다. 이렇게 화이트 리스트 경로는 인증과 무관하게 항상 허용한다.
 화이트 리스트를 제외한 나머지 모든 경로에는 인증 체크 로직을 적용한다.

 isLoginCheckPath(String requestURI)
 -> 화이트 리스트를 제외한 모든 경우에 인증 체크 로직을 적용한다.

 httpResponse.sendRedirect("/login?redirectURL="+requestURI);
 -> 미인증된 사용자는 로그인 화면으로 리다이렉트 한다. 그런데 로그인 이후에
 다시 홈으로 이동해버리면, 원하는 경로를 다시 찾아가야 하는 불편함이 있다.
 예를들어 상품 관리 화면을 보려고 했다가, 로그인 화면으로 이동하면, 로그인
 이후에 다시 상품 관리 화면으로 들어가는 것이 좋다.
 
 return;
 -> 필터를 더이상 진행하지 않는다 라는 뜻의 코드. 이후 필터는 물론 서블릿, 
 컨트롤러가 더는 호출되지 않는다. 앞서 redirect를 사용했기 때문에 redirect가
 응답으로 적용되고 요청이 끝이난다.























