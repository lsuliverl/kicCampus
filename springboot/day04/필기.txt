1. URL
 - 단순한 URL
	-> @{/hello}	/hello

 - 쿼리 파라미터
	-> @{/hello(param1=${param1}, param2=${param2})}
	() 에 있는 부분은 쿼리 파라미터로 처리되다.
	 /hello?param1=data1&param2=data2

 - 경로변수
 	-> @{/hello/{param1}/{param2}(param1=${param1},param2=${param2})}
	URL 경로상에 변수가 있으면 ()부분은 경로 변수로 처리된다.
 	/hello/data1/data2

- 경로변수 + 쿼리 파라미터
 	-> @{/hello/{param1}(param1=${param1},param2=${param2})}
	경로 변수와 쿼리 파라미터를 함께 사용할 수 있다
	/hello/data1?param2=data2


2. 리터럴(Literals)
 - 리터럴은 소스 코드상에 고정된 값을 말하는 용어
 예를들어 "Hello" 문자 리터럴, 10, 20 이면 숫자 리터럴이다. 
 - 타임리프의 리터럴
	문자 : 'hello'
	숫자 : 10
	불린 : true, false
	null : null

 - 타임리프에서는 문자 리터럴은 항상 '(작은 따옴표)로 감싸야 한다.
 <span th:text="'hello'">

 - 문자를 항상 '로 감싸는 것은 너무 귀찮기 때문에 공백 없이 쭉 이어진다면
 하나의 의미있는 토큰으로 인지해서 다음과 같이 작은 따옴표를 생각 가능하다
 <span th:text="hello">

 -  <span th:text="hello world">
 문자 리터럴은 원칙상 ' 로 감싸야 한다. 중간에 공백이 있어서 하나의 의미있는
 토큰으로도 인식되지 않는다. => 오류 발생

 -  <span th:text="'hello world'">
 이렇게 '로 감싸면 정상 동작을 한다.

3. 속성 설정
 - th:* 속성을 지정하면 타임리프는 기존 속성을 th:* 로 지정한
 속성으로 대체한다. 기존 속성이 없다면 새로 만든다.
 
 - th:attrappend : 속성 값이 뒤에 값을 추가
 - th:attrprepend : 속성 값의 앞에 값을 추가
 - th:classappend : class 속성에 자연스럽게 추가

4. 반복 상태 유지
 <tr th:each="user, userStat : ${users}" >
 - 반복문에서 두번째 파라미터를 설정해 반복의 상태를 확인 할 수 있다.
 - 두번째 파라미터는 생략 가능한데, 생략하면 지정한 변수명(user) + Stat가
 된다.

5. 조건부 평가
 - 타임리프의 조건식
 - if, unless(if의 반대)
 - if, unless
	-> 타임리프는 해당 조건이 맞지 않으면 태그 자체를 렌더링 하지
 	않습니다. 

 - switch
	-> 조건을 맞족하지 않으면 해당 tag가 조회되지 않는다.




















