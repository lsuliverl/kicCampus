/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.73
 * Generated at: 2023-04-11 07:52:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.join;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class join_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Join</title>\r\n");
      out.write("<!-- <link rel=\"stylesheet\" href=\"/division.css\"> -->\r\n");
      out.write("<style >\r\n");
      out.write("\r\n");
      out.write("div {\r\n");
      out.write("	width: 100%;\r\n");
      out.write("}\r\n");
      out.write("div.left {	\r\n");
      out.write("	width: 20%;\r\n");
      out.write("	float: left;\r\n");
      out.write("}\r\n");
      out.write("div.right {\r\n");
      out.write("	width: 80%;\r\n");
      out.write("	float: right;\r\n");
      out.write("	height: 670px;\r\n");
      out.write("	display: flex;\r\n");
      out.write("	justify-content: center;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("legend{\r\n");
      out.write("	font-size: 25px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("form { \r\n");
      out.write("	width: 65%;\r\n");
      out.write("	 }\r\n");
      out.write("\r\n");
      out.write("*:focus {\r\n");
      out.write("    outline: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("label{\r\n");
      out.write("	display:inline-block;\r\n");
      out.write("	width: 80px;\r\n");
      out.write("	padding: 5px;\r\n");
      out.write("}\r\n");
      out.write("label.re{width: 140px; margin-left: 90px;}\r\n");
      out.write("\r\n");
      out.write("input[type=button],input[type=submit],input[type=reset] {\r\n");
      out.write("	display:inline-block;\r\n");
      out.write("	width: 70px;\r\n");
      out.write("	background-color: #434343;\r\n");
      out.write("	color: white;\r\n");
      out.write("	padding: 5px 5px;\r\n");
      out.write("	margin: 8px 0;\r\n");
      out.write("	border: none;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("input[type=text] ,input[type=password]{\r\n");
      out.write("	background-color:#00ff0000;\r\n");
      out.write("	padding: 5px 5px;\r\n");
      out.write("	margin: 8px 0;\r\n");
      out.write("	border: hidden;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	border-bottom: solid thin;\r\n");
      out.write("	border-bottom-color:#434343; \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("button:hover {\r\n");
      out.write("  opacity: 0.8;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class = \"all\">\r\n");
      out.write("		<div class = \"left\">\r\n");
      out.write("			<header ></header>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class = \"right\" >\r\n");
      out.write("		<!-- html day10 form5 -->\r\n");
      out.write("			<form name=\"join_form\" id=\"join_form\" form action=\"/join/UserJoin.us\" method=\"post\">\r\n");
      out.write("				<fieldset>\r\n");
      out.write("					<legend >회원가입</legend>\r\n");
      out.write("					<div>\r\n");
      out.write("						<label>아이디</label>\r\n");
      out.write("						<input type=\"text\" name=\"userid\" id=\"userid\">\r\n");
      out.write("						<input type=\"button\" value=\"중복확인\" onclick=\"checkId(join_form.userid.value)\"> \r\n");
      out.write("					</div>\r\n");
      out.write("					<hr>\r\n");
      out.write("					<div>\r\n");
      out.write("						<label>비밀번호</label>\r\n");
      out.write("						<input type=\"password\" name=\"userpw\" id=\"userpw\">\r\n");
      out.write("						\r\n");
      out.write("						<label class=\"re\">비밀번호 확인</label>\r\n");
      out.write("						<input type=\"password\" name=\"userpwre\" id=\"userpwre\" style=\"margin-left: -40px !important;\">\r\n");
      out.write("					</div>\r\n");
      out.write("					<hr>\r\n");
      out.write("					\r\n");
      out.write("					<div>\r\n");
      out.write("						<label>이메일</label>\r\n");
      out.write("						<input type=\"text\" name=\"useremail\" id=\"useremail\" >\r\n");
      out.write("					</div>\r\n");
      out.write("					<hr>\r\n");
      out.write("					\r\n");
      out.write("					<div>\r\n");
      out.write("						<label>연락처</label>\r\n");
      out.write("						<input type=\"text\" name=\"userphone\" id=\"userphone\">\r\n");
      out.write("					</div>\r\n");
      out.write("					<hr>\r\n");
      out.write("					\r\n");
      out.write("					<div class=\"input_group\" align=\"right\">\r\n");
      out.write("						<input type=\"submit\" name=\"button\" value=\"가입하기\" />\r\n");
      out.write("						<input type=\"reset\" name=\"button2\" value=\"초기화\" style=\"margin-left: 20px\"/>\r\n");
      out.write("					</div>\r\n");
      out.write("				</fieldset>\r\n");
      out.write("			</form>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("<script src=\"/header.js\"></script>\r\n");
      out.write(" <script src=\"http://code.jquery.com/jquery-3.2.1.min.js\"></script>\r\n");
      out.write("    <!-- 정규표현식 검사 객체를 참조한다. -->\r\n");
      out.write("    <script src=\"regex.js\"></script>\r\n");
      out.write("<script >\r\n");
      out.write("\r\n");
      out.write("var n=0;\r\n");
      out.write("\r\n");
      out.write("$(function() {\r\n");
      out.write("    /** 가입폼의 submit 이벤트 */\r\n");
      out.write("    $(\"#join_form\").submit(function(e) {\r\n");
      out.write("        // 기본동작 수행 방식\r\n");
      out.write("        e.preventDefault();\r\n");
      out.write("\r\n");
      out.write("        /** 아이디 검사 */\r\n");
      out.write("        if (!regex.value('#userid', '아이디를 입력해주세요.')) { return false; }\r\n");
      out.write("        if (!regex.eng_num('#userid', '아이디는 영어와 숫자만 입력 가능합니다.')) { return false; }\r\n");
      out.write("        if (!regex.min_length('#userid', 4, '아이디는 최소4자이상 입력해주세요. ')) { return false; }\r\n");
      out.write("        if (!regex.max_length('#userid', 9, '아이디는 최대 9자 까지만 입력 가능합니다.')) { return false; }\r\n");
      out.write("        if(n==0){alert(\"아이디 중복확인을 먼저 해주세요!\");return false;}\r\n");
      out.write("\r\n");
      out.write("        /** 비밀번호 검사 */\r\n");
      out.write("        if (!regex.value('#userpw', '비밀번호를 입력하세요.')) { return false; }\r\n");
      out.write("        if (!regex.min_length('#userpw', 4, '비밀번호는 최소 4자 이상 입력 가능합니다.')) { return false; }\r\n");
      out.write("        if (!regex.max_length('#userpw', 20, '비밀번호는 최대 20자 까지만 입력 가능합니다.')) { return false; }\r\n");
      out.write("        if (!regex.compare_to('#userpw', '#userpwre', '비밀번호를 확인해주세요.')) { return false; }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        /** 이메일 검사 */\r\n");
      out.write("        if (!regex.value('#useremail', '이메일을 입력하세요.')) { return false; }\r\n");
      out.write("        if (!regex.email('#useremail', '이메일 주소가 잘못되었습니다.')) { return false; }\r\n");
      out.write("\r\n");
      out.write("        /** 연락처 검사 */\r\n");
      out.write("        if (!regex.value('#userphone', '연락처를 입력하세요.')) { return false; }\r\n");
      out.write("        if (!regex.phone('#userphone', '연락처가 잘못되었습니다.')) { return false; }\r\n");
      out.write("\r\n");
      out.write("        // 처리 완료\r\n");
      out.write("//         alert(\"가입완료!!\");\r\n");
      out.write("        let frm = document.join_form;\r\n");
      out.write("        frm.submit();\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("    });\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("function checkId(userid){\r\n");
      out.write("//	alert(data);	\r\n");
      out.write("	\r\n");
      out.write("	if(userid == \"\"){\r\n");
      out.write("		alert(\"아이디를 입력해주세요.\");\r\n");
      out.write("		return false;\r\n");
      out.write("	}else{\r\n");
      out.write("		//ajax통신\r\n");
      out.write("		let xhr = new XMLHttpRequest();\r\n");
      out.write("		xhr.open(\"GET\",\"idcheck.jsp?userid=\"+userid,true);\r\n");
      out.write("		xhr.send();\r\n");
      out.write("		xhr.onreadystatechange = function(){\r\n");
      out.write("			if(xhr.readyState == 4){\r\n");
      out.write("				if(xhr.responseText.trim() == \"ok\"){\r\n");
      out.write("					alert(\"사용가능 아이디 입니다.\");\r\n");
      out.write("					n += 1;\r\n");
      out.write("				}else{\r\n");
      out.write("					alert(\"이미 사용중인 아이디 입니다.\");\r\n");
      out.write("					n=0;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("}\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
