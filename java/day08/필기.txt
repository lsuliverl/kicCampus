1. 디자인 패턴
 1-1. 디자인 패턴이란?
  - 디자인 패턴이란 기존 환경 내에서 반복적으로 일어나는
  문제들을 어떻게 풀어갈 것인가에 대한 일종의 솔루션
  같은 것이다.
  - 디자인 패턴은 설계자들이 "올바른" 설계를 "빠르게" 
  만들 수 있도록 도와준다.

 1-2. Singleton 패턴
  - 프로그램 내의 여러 곳에서 반복적으로 사용되어야 하는
  객체에 대해 전역적인 범위를 갖도록 객체를 생성하고,
  이 객체를 여러 곳에서 공유하기 위한 클래스 작성 패턴
  - 이러한 패턴을 통해 생성된 객체를 싱글톤 객체라고한다.

 1-3. Singleton 객체의 이점
  - 프로그램의 전역에서 활용할 재료로 사용되는 공유 기능을
  하나만 생성하여 여러 곳에서 재사용함으로써 메모리를
  효율적으로 사용할 수 있다.
  - 단 한번만 객체를 생성하면 다시 객체를 생성할 필요가 없기
  때문에, 해당 기능을 사용할 때마다 객체를 일일이 생성해야
  하는 번거로움을 피할수 있다.

2. 패키지와 라이브러리
 2-1. java package
  - 패키지 -> 클래스에 대한 묶음 단위
  - 클래스를 용도별이나, 기능별로 그룹화 한 것을 말한다.
  소스코드는 폴더로 분류된 형태로 존재하게 된다.
  - 서로다른 패키지에 속해 있다면 다른 클래스와 이름이
  동일하더라도 충돌이 발생하지 않는다.
  (서로 다른 폴더에는 이름이 같은 파일들이 존재할 수 있다.)
  - 패키지에 소속된 클래스 파일은 첫 번째 라인에서 자신이
  소속된 클래스패키지 이름을 선언해야 한다.
 
3. ClassPath
 3-1. ClassPath란
  - 컴파일이 완료된 *.class 파일들이 위치하는 경로

4. 라이브러리
 4-1. 라이브러리
  - 한개 이상의 패키지들을 배포하기 용이하도록 압축한 형태
  - 다른 프로그램에서 라이브러리 안에포함된 기능을
  활용할 수 있다.
  - *.jar

5. Java에서 기본 기능(API)들

6. Wrapper Class
 6-1. Wrapper Class
  - java는 데이터를 관리하기 위하여 기본 데이터 타입을
  지원하지만, 클래스를 통해서 만들어진 객체를 통한
  데이터 관리도 가능하다.
  - 어떤 상황에서는 기본 데이터 타입의변수를 객체형태로
  사용해야 하는 경우가 있는데, 이때 기본형 타입을 객체로
  포장할 필요가 있다.
  - 포장 클래스(Wrapper class)는 특정 기본형 타입을 
  나타내는 용도로사용된다.

 6-2. wrapper class 의미
  - 초창기 java언어는 기본 자료형의 연산보다도 
  Wrapper class를 사용한 연산이 더 많이 이루어 졌으나,
  java언어가 발전함에 따라서 기본 자료형과 Wrapper클래스
  간의 연산에 차이가 없어졌다.
  - 최근의 java언어는 Wrapper 클래스와 기본 자료형을 
  구분하지 않고 사용한다.

 6-3. wrapper 클래스의 객체 만들기
  - 각각의 wrapper 클래스의 객체는 자신과 대응되는 기본
  자료형의 데이터를 파라미터로 전달받는다.

	int num = 1;
	Integer wrapper = new Integer( num );

 6-4. Wrapper 클래스의 형변환
  - 기본 자료형과 wrapper 클래스 간에는 서로 암묵적 
  형변환이 가능하다

	int num = 100;
	Integer wrapper = num;

	Integer wrapper = new Integer(100);
	int num = wrapper;

 6-5.  Wrapper 클래스의 static 데이터
  - 모든 Wrapper 클래스는 static 데이터 형태로 wrapper
  클래스에 대응하는 자료형에 대한 최소값과 최대값을
  가지고 있다.

	int max = Integer.MAX_VALUE;
	int min = Integer.MIN_VALUE;

 6-6. 문자열 데이터의 형변환(중요)
  - 1과 "1"의 차이
	-> 기본 자료형과 문자열 데이터간의 연산에서는
	기본 자료형 데이터가 문자열로 변환된 후,
	문자열 간의연산으로 처리 된다.

	int a = 1;
	String b = "1";
	System.out.println(a + b);	// "11" 이 출력됨

  - 사용자 입력값에 대한 연산
 	-> 모든 프로그램 플랫폼에서 사용자의 입력값은
	String으로 처리된다.
	-> 만약, 인터넷 뱅킹에서 2개의 계좌로 송금할 
	금액을 각각 입력하였을 때, 총 금액을 계산한다면
	다음과 같이 처리될 것이다.

	String money1 = "3000";
	String moeny2 = "5000";
	String total = money1 + moeny2; // "30005000"

  - 문자열 데이터의 형변환
 	-> 문자열 데이터를 기본 데이터형으로 변환하기
	-> Wrapper클래스에는 기본 자료형의 모양을
	띄고 있는 문자열 데이터를 실제 기본 자료형으로
	변환시키는 기능이포함되어 있다.
	-> Warpper클래스를 사용하는 가장 큰 의미이다.

	String money1 = "3000";
	String moeny2 = "5000";

	int m1 = Integer.parseInt(money1);
	int m2 = Integer.parseInt(moeny2);

	System.out.println(m1 + m2);	// 8000


7. Math 클래스
 7-1. 수학적 연산을 지원하는 클래스
  - Math클래스는 흔히 계산을 하는데 도움이 되는 많은 수의
  기본적 수학 함수들을 제공한다.
  - Math 클래스는 Java 표준 크래스 라이브러리의 
  java.lang 패키지에 정의되어 있다.
  - Math 클래스의 모든 메서드들을 static 메서드로, 
  클래스 객체를생성하지 않고 그 메서드가 정의된 클래스
  이름을 통해 호출될 수 있다.

8. String 클래스











