1. overload
1-1. this 키워드를 사용한 생성자 overload
- this 키워드를 메서드처럼 사용할 경우, 현재 클래스의 다른 생성자를 의미한다.

1-2 this 키워드를 사용하여 생성자 overload를 간결하게 처리
- 파라미터가 서로 다른 생성자들이 하나의 완전한 생성자를 호출하도록 하여, 
데이터의 초기화를 한 곳에서 일괄적으로 처리하도록 구현할 수 있다.

class Hello{
	public Hello(String msg){
		System.out.println(msg);
	}
	public Hello(){
		this("Hello");
		//System.out.println("Hello");
	}
}

2. 객체 형변환과 객체 배열
2-1. 객체 형변환
- java 기본 유형의 데이터들처럼 객체 참조변수의 경우에도 형변환(casting)이 
이루어진다.
- 서로 다른 클래스 유형으로부터 나온 객체 참조변수들 간의 대입에는 일정한 
규칙이 있다.

	Parent parent = new Child();

- 왼쪽 항(부모, Parent)과 오른쪽 항(자식, Child)의 객체 유형이 서로 다른 경우, 
두 유형이 서로 상속관계에 있고 왼쪽 객체가 오른쪽 객체의 상위 클래스인 
경우에만 암묵적인 변환이 일어난다.
- 하위 클래스에서 상위 클래스 유형으로 할당하는 것은 가능하나 그 반대의
경우에는 명시적 형 변환을 해야한다.

- 암묵적 형변환이 기능한 경우
A a1 = new B();
A a2 = new X();
--------------------
A a3 = new C();
A a4 = new Y();
--------------------
B b1 = new C();
X x1 = new Y();
--------------------
C c = new C();
B b2 = c;
--------------------
Y y = new Y();
X x2 = y;

2-2. 암묵적 형변환과 메서드 오버라이드
- 암묵적 형변환은 부모를 상속받는 자식객체의 기능을 부모에게 물려받은 기능만
 사용하도록 제한한다.
- 그러므로 암묵적 형변환이 발생하게 되면 오버라이드된 기능만 사용 가능하고, 
추가적으로 구현한 기능은 사용할 수 없다.
- 주의할 점은 기능의 제한이지 기능의 변경은 아니라는 것이다.
- 상속관계의 객체를 부모 형태로 변환하면, 클래스의 종류를 구분하지 않고 
일괄된 기능을 호출 할 수 있다.
- 객체가 상위클래스의 형태로 형변환 되더라도 Override된 자신의 기능은 잃지 
않는다. 

	Unit u1 = army;
	Unit u2 = navy;
    	Unit u3 = airforce;
    
    	u1.attack();
    	u2.attack();
    	u3.attack();

- 추가적으로 구현한 기능은 사용할 수 없게 되므로 원래의 기능을 다시 사용 
할 수 있는 방법이 필요해졌다.   

    	// 부모 클래스가 가지고 있는 기능이 아니므로 에러
    	u1.tank();
    	u2.nucleus();
   	u3.bumbing();	

2-3. 명시적 형변환
- 부모 클래스의 객체를 자식 클래스 형태로 변환하는 것이다.
- 형변환을 위해서는 다음과 같이 변환할 클래스 이름을 명시적으로 지정해 
주어야 한다.

	ChildClass child = (ChildClass)parent;

2-4. 명시적 형변환의 조건
- 객체가 최초로 생성될 때 자식 클래스 형태로 생성되고, 부모 형태로 암묵적 
형변환이 된 상태를 다시 원래의 자식 클래스 형태로 되돌릴 경우에만 가능해진다.

	ChildClass child1 = new ChildClass();
	ParentClass parent1 = child1;		// 암묵적 형변환
	ChildClass child2 = (ChildClass)parent1;	// 명시적 형변환

2-5. 형변환 가능여부
	-가능한 경우
	Army army1 = new Army();
	Unit u = army1;		// 암묵적 형변환
	Army army2 = (Army)u;	// 명시적 형변환

	- 가능한 경우
	Unit u = new Navy();
	Navy navy = (Navy)u;	// 명시적 형변환

	- 불가능한 경우 : 최초 객체 생성이 부모 형태로 만들어진 경우 불가능
	Unit u = new Unit();
	Army army = (Army)u;	// 명시적 형변환

	- 불가능한 경우 : 최초 생성된 것과 다른 형식으로 변환하는 것은 불가능
	Army army = new Army();
	Unit u = army;
	Navy navy = (Navy)u;

	-> 불가능한 두가지 경우 문법적인 오류는 없기 때문에, 이클립스에서는
	 에러를 검출하지 못한다. 하지만 프로그램 실행시켰을 경우에는 에러가 발생한다.

3. 객체 배열
3-1. 객체 배열
- 일반 데이터 타입의 배열과 동일한 개념으로, 같은 클래스의 객체 여러 개를 
그룹화 할 수 있다.
- 일반 데이터 형의 배열의 경우

	int[ ] data = new int[3];
	Army[ ] data = new Army[3];

3-2. 배열 할당
- 일반 데이터 형은 단순히 값을 대입하지만, 객체 배열은 'new'를 사용하여 객체를
 할당해야한다.
- 일반 데이터 형 배열
	data[0] = 1;
	data[1] = 2;
	data[2] = 10;

- 객체 배열
	data[0] = new Army();
	data[1] = new Army();
	data[2] = new Army();

3-3. 부모 클래스의 배열에 자식 클래스의 객체를 넣기
- 객체 형변환 + 객체 배열
- 배열의 생성이 부모 클래스로 지정되었을 경우, 모든 자식 클래스의 객체들은 
그 배열에 포함될 수 있다.

	Unit[] unit = new Unit[3];
	// 배열의 요소 할당과정에서 암묵적 형변환이 일어난다.
	unit[0] = new Army();
	unit[1] = new Navy();
	unit[2] = new AirForce();

3-4. 객체 배열의 활용
- 일괄 처리가 가능
- 서로 다른 객체를 부모 형태의 배열에 담게 되면, 반복문으로 일괄처리가 가능하다
- 이 때 배열의 각 요소를 통해서 사용하는 메서드가 Override 되어 있을 경우, 
부모의 메서드가 아니라 자신이 재정의한 기능을 뜻한다.
	
	for( int i = 0; i<units.length; i++ ) {
		units[i].attack();
	}

3-5. 원래 기능으로 복귀하기
- 배열의 각 요소가 확장한 기능을 사용하기 위해서는 원래의 클래스 형태로 
명시적 형변환이 이루어져야 한다.
- 하지만 반복적으로 처리되는 과정에서 몇 번째 요소가 어떤 클래스에서 최초로
 생성되었는지를 판단하기란 쉽지않다.
- instanceof 연산자는 어떤 객체에 대한 출처를 판단하여 boolean 형으로 결과를 
반환한다.
	if(units[0] instanceof Army) { 
		Army temp1 = (Army)units[0];
    		temp1.tank();
	}

4. 추상화 
 - 다형성 (Override, Overload)은 서로 다른 기능이지만 메서드의 이름을 공통되게
 처리함으로서 전체 프로그램의 일관성을 유지하게 한다.
- Override 처리의 문제발생 가능성
- "@Override" 선택적으로 사용, 메서드 이름에 실수가 발생하면 에러가 아닌 
새로운 메서드의 정의로 인식되므로 의도하지 않은 실행결과를 가져올 수 있다.
 - 부모의 기능을 재정의 하지 않았다면 다형성의 구현은 이루어지지 않게 된다.

4-1. 상속 처리 시, Override 강제하기
- 추상화 기법은 특정 클래스를 상속받은 경우, 부모의 특정 메서드들을 무조건 
재정의하도록 강제하는 기법이다.
- 특정 메서드를 재정의하도록 강제함으로써, 자식 클래스들을 작성하기 위한 
가이드 역할을 할 수 있다.
- 즉, 추상화 기법은 java 클래스를 작성하기 위한 설계도를 소스코드 형태로 
제시하는 역할을 한다.

4-2. 추상 메서드 만들기
- 추상 메서드를 정의하기 위해서  'abstract' 키워드를 사용하여 메서드를 정의한다.
- 추상 메서드는 자식 클래스가 구현해야하는 메서드의 가이드 라인만 제시하기
위한 목적으로 사용되기 때문에, 선언만 가능하고 구현부가 없다.

	// 선언만 가능하고, 구현부를 위한 블록이 존재하지 않는다.
	public abstract void sayHello();

4-3. 추상 메서드를 포함한 클래스
- 추상 메서드를 하나 이상 포함하고 있는 클래스는 반드시 '추상 클래스'로 
정의되어야 한다.
- 추상 클래스 'abstract' 키워드를 사용하여 정의할 수 있다.

// 추상 클래스
	public abstract class Hello {
		public abstract void sayHello();
	}	

- 추상 클래스는 객체를 생성할 수 없고, 반드시 상속을 통해서만 사용될 수 있다. 
즉, 추상 클래스는 다른 자식 클래스를 위한 '가이드라인'의 역할을 한다.

4-4. 공통 기능과 설계 제시를 모두 처리하기
- 추상 클래스는 생성자, 멤버변수, 일반 메서드등을 포함할 수 있다.
- 즉, 공통 기능과 가이드라인을 모두 정의하여 다른 클래스에게 상속된다.

5. 인터페이스
5-1. 추상 클래스의 한계
- 자바 클래스 간의 상속에서는 하나의 부모만 존재할 수 있기 때문에, 앞의 
상황에서 요구하는 다중 상속의 구현은 불가능하다.

5-2. Interface란?
- 완벽한 추상화를 구현하기 위한 java Class의 한 종류이다.
- 다중 상속이 가능하기 때문에 용도별로 세분화하여 필요한 요소만 상속할 수 
있다.

5-3. 추상 클래스 vs 인터페이스
- 추상 클래스
	-> 멤버변수, 생성자, 메서드, 추상 메서드를 포함할 수 있다.
	-> 이 클래스를 상속받는 자식 클래스는 다른 클래스를 상속받을 수 
	없다.
	-> 객체의 생성이 불가능하다.

- 인터페이스
	-> 추상 메서드만 포함할 수 있다.
	-> 인터페이스는 다중 상속이 가능하다.
	-> 객체의 생성이 불가능하다.

6. static

	public class Article {
	private static int count;			// 전체 글 수
	private static String category;		// 카테고리
	private int num;			// 글 번호
	private String title;			// 제목
	private String regDate;		// 날짜
	}	

6-1. 객체간의 공유 자원을 표현하는 static 키워드
- 클래스를 설계할 때, 멤버변수 중 모든 객체에서 공통적으로 사용해야 하는 값에
 static을 붙인다.
- static이 붙은 멤버변수는 객체의 개수에 상관없이 단 하나만 생성되며, 이를 
모든 객체가 공유하기때문에 메모리를 효율적으로 사용할 수 있다.

6-2. 컴퓨터의 메모리 구조
- 코드 영역(고정 영역)
	-> 프로그램의 코드가 저장되는 영역이다.
	-> 이 영역에 저장된 명령어들을 CPU가 하나씩 가져가 실행한다.
- 데이터 영역(고정 영역)
	-> static으로 선언되는 변수가 할당된다.
	-> 이 영역에 할당되는 변수들은 프로그램 시작과 동시에 메모리 
	공간이 할당되어 종료될 때까지 남아있게 된다.
- 힙 영역(동적 영역)
	-> 프로그래머가 원하는 시점에 변수를 할당하고 소멸시키는 영역이다.
	-> 메모리 동적 할당시 사용된다. 객체가 생성되는 영역이다.
- 스택 영역(동적 영역)
	-> 함수가 실행될 때, 사용되는 파라미터와 지역변수에 대한 메모리 
	공간이다.
	-> 함수의 종료와 함께 소멸된다.

6-3. 고정 영역 vs 동적 영역
- 고정 영역
	-> 프로그램이 실행되면 실행파일이 메모리에 로드되면서, 실행 파일의
	 용량만큼 RAM을 사용한다.
	-> 실행 파일의 크기는 변할 수 없으므로 이 영역의 크기는 고정 크기를 
	갖는다.
- 동적 영역
	-> 프로그래머가 new 키워드를 사용해서 객체나 배열을 생성하면 
	사용된다. (힙 영역)
	-> 또 다른 경우는 메서드가 호출되는 동안 사용될 파라미터와 
	지역변수가 생성된다. (스택 영역)
	-> 메서드가 종료되거나 객체가 더 이상 사용되지 않으면 생성된 변수나
	 객체는 메모리에서 사라지므로, 이 영역은 유동적인 크기를 갖게 된다.

6-4. 멤버변수와 static 멤버변수의 차이
- static 변수는 프로그램의 실행과 동시에 객체 생성 여부와 상관없이 이미 
존재하기 때문에 소스코드에서는 특정 클래스 안에 명시하지만, 그 클래스를 
통해서 생성되는 객체나 그 안에 포함되는 멤버변수와는 다른 존재이다.
- 객체가 생성되지 않았더라도 이미 존재하고 있기 때문에 static 변수는 객체의 
이름을 통해 접근하는 것이 아니라, 클래스의 이름을 통해서 접근해야 한다.
- 단, static 변수가 선언된 클래스 안에서는 변수 이름으로 직접 접근이 허용된다.

- Article 클래스 및 다른 클래스에서 접근하는 경우
	-> Article.count = 3;
	-> Article.category = "공지사항";
- Article 클래스에서 접근하는 경우
	-> count = 3;
	-> category = "Q&A게시판";







